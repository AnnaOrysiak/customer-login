{"version":3,"sources":["components/SubmitButton.js","components/LoginForm.js","components/Notifications.js","App.js","serviceWorker.js","index.js"],"names":["formTestPass","email","password","formFetch","a","settings","method","headers","Accept","body","JSON","stringify","fetch","fetchResponse","json","data","SubmitButton","props","formSend","handleStatusForm","login","handleLogin","validated","type","className","onClick","then","console","log","token","LoginSchema","Yup","shape","min","max","required","LoginForm","initialValues","validationSchema","onSubmit","values","errors","touched","aria-hidden","name","htmlFor","length","maxLength","href","createNotification","NotificationManager","info","success","warning","error","App","state","messageType","createNotifications","newNotification","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f966754.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./SubmitButton.css\";\r\n\r\nconst baseURL = \"https://reqres.in/api/login\";\r\n\r\nconst formTestPass = {\r\n  email: \"eve.holt@reqres.in\",\r\n  password: \"cityslicka\"\r\n};\r\n\r\nconst formFetch = async () => {\r\n  const settings = {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(formTestPass)\r\n  };\r\n\r\n  try {\r\n    const fetchResponse = await fetch(`${baseURL}`, settings);\r\n    const data = await fetchResponse.json();\r\n    return data;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n\r\n}\r\n\r\nconst SubmitButton = (props) => {\r\n\r\n  const { formSend, handleStatusForm, login, handleLogin, validated } = props;\r\n  const handleSubmit = () => {\r\n\r\n    if (formSend && login) {\r\n      handleStatusForm(\"info\");\r\n    } else {\r\n      if (validated) {\r\n        formFetch()\r\n          .then(data => {\r\n            handleStatusForm(\"success\");\r\n\r\n            // Console log left on purpose\r\n            // Preview of receiving data\r\n            console.log(`token: ${data.token}`);\r\n            handleLogin();\r\n          })\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <button type=\"submit\" className=\"form__btn\" onClick={handleSubmit}>\r\n      Login\r\n      </button>\r\n  );\r\n\r\n}\r\n\r\nexport default SubmitButton;","import React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport \"./LoginForm.css\";\r\n\r\nconst LoginSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(8, 'Too short! Password should be between 8 and 32 characters')\r\n    .max(32, 'Too long! Password should be between 8 and 32 characters')\r\n    .required('Required'),\r\n  email: Yup.string()\r\n    .email('Invalid email')\r\n    .required('Required'),\r\n});\r\n\r\nconst LoginForm = (props) => {\r\n  const { formSend, handleStatusForm, login, handleLogin } = props;\r\n\r\n  return (\r\n\r\n    <div className=\"form\">\r\n      <h2 className=\"form__title\">Customer login</h2>\r\n\r\n      <Formik\r\n        initialValues={{\r\n          email: '',\r\n          password: ''\r\n        }}\r\n\r\n        validationSchema={LoginSchema}\r\n        onSubmit={values => {\r\n          // Console.log left on purpose\r\n          // Preview of original inputs values\r\n          console.log(`Original values: \r\n          email - ${values.email}\r\n          password - ${values.password}`);\r\n        }}\r\n      >\r\n        {({ errors, touched, values }) => (\r\n\r\n          <Form className=\"login-form\">\r\n            <div className=\"form__field\">\r\n              <span className={`icon fa fa-user${errors.email && touched.email ? \" invalid\" : \"\"}`} aria-hidden=\"true\"></span>\r\n              <Field type=\"email\" name=\"email\" className=\"form__input\" required />\r\n              <label htmlFor=\"password\" className={`input-label${values.email.length > 0 ? \" touched\" : \"\"}`}>Email</label>\r\n              {errors.email && touched.email && <div className=\"form__alert\">{errors.email}</div>}\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <div className=\"form__field\">\r\n              <span className={`icon fa fa-lock${errors.password && touched.password ? \" invalid\" : \"\"}`} aria-hidden=\"true\"></span>\r\n              <Field type=\"password\" name=\"password\" className=\"form__input form__input--password\" maxLength=\"32\" required />\r\n              <label htmlFor=\"password\" className={`input-label${values.password.length > 0 ? \" touched\" : \"\"}`}>Password</label>\r\n              {errors.password && touched.password && <div className=\"form__alert\">{errors.password}</div>}\r\n            </div>\r\n\r\n            <SubmitButton\r\n              formSend={formSend}\r\n              handleStatusForm={handleStatusForm}\r\n              login={login}\r\n              handleLogin={handleLogin}\r\n              validated={!errors.email && touched.email && !errors.password && touched.password}\r\n            />\r\n\r\n            <div className=\"form__footer\">\r\n              <p>Forgot Password? <a href=\"http://\">Click Here</a></p>\r\n            </div>\r\n          </Form>\r\n        )\r\n        }\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginForm;","import { NotificationManager } from 'react-notifications';\r\n\r\n\r\nconst createNotification = (type) => {\r\n\r\n  return () => {\r\n    switch (type) {\r\n      case 'info':\r\n        NotificationManager.info('Your are already logged in');\r\n        break;\r\n      case \"success\":\r\n        NotificationManager.success('Login successful');\r\n        break;\r\n      case 'warning':\r\n        NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\r\n        break;\r\n      case 'error':\r\n        NotificationManager.error('Login failed', '', 5000);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n}\r\n\r\nexport default createNotification;","import React, { Component } from 'react';\nimport { NotificationContainer } from 'react-notifications';\nimport LoginForm from \"./components/LoginForm\";\nimport createNotifications from \"./components/Notifications\";\nimport 'react-notifications/lib/notifications.css';\n\nclass App extends Component {\n\n  state = {\n    formSend: false,\n    login: false\n  }\n\n  handleStatusForm = (messageType) => {\n\n    const newNotification = createNotifications(messageType);\n    newNotification(messageType);\n\n    this.setState({\n      formSend: true\n    });\n  }\n\n  handleLogin = () => {\n    this.setState({\n      login: true\n    })\n  }\n\n  render() {\n\n    return (\n      <>\n        <LoginForm\n          formSend={this.state.formSend}\n          handleStatusForm={this.handleStatusForm}\n          login={this.state.login}\n          handleLogin={this.handleLogin}\n        />\n\n        <NotificationContainer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}